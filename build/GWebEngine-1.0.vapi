/* GWebEngine-1.0.vapi generated by valac 0.56.3, do not modify. */

[CCode (gir_namespace = "GWebEngine", gir_version = "1.0")]
namespace GWebEngine {
	[CCode (cheader_filename = "gwebengine.h")]
	public class Event : GLib.Object {
		public Event ();
	}
	[CCode (cheader_filename = "gwebengine.h")]
	public class JSResult : GLib.Object {
		public JSResult ();
		public signal void ready (string json);
	}
	[CCode (cheader_filename = "gwebengine.h")]
	public class KeyEvent : GWebEngine.Event {
		public KeyEvent ();
		public int key { get; set construct; }
		public int modifiers { get; set construct; }
		public int scan_code { get; set construct; }
		public string? text { get; set construct; }
		public int virtual_key { get; set construct; }
	}
	[CCode (cheader_filename = "gwebengine.h")]
	public class Main : GLib.Object {
		public Main ();
		public void init ();
		public void iterate ();
		public void main_quit ();
		public GWebEngine.WebView make_webview ();
		public string? data { get; set construct; }
		public signal void ready ();
		public signal void signal_main ();
		public signal void signal_main_quit ();
		public signal GWebEngine.WebView signal_make_webview ();
	}
	[CCode (cheader_filename = "gwebengine.h")]
	public class PluginLoader : GLib.Object {
		public PluginLoader ();
		public GWebEngine.Plugin load (string path) throws GWebEngine.PluginError;
	}
	[CCode (cheader_filename = "gwebengine.h")]
	public class WebSettings : GLib.Object {
		public WebSettings ();
		public bool fullscreen_enabled { get; set; }
		public bool javascript_enabled { get; set; }
		public bool plugins_enabled { get; set; }
		public bool webgl_enabled { get; set; }
	}
	[CCode (cheader_filename = "gwebengine.h")]
	public class WebView : Gtk.Socket {
		public WebView (int id, GWebEngine.WebSettings _settings = new GWebEngine.WebSettings ());
		public void back ();
		public GWebEngine.JSResult execute (string code);
		public bool find (string text);
		public void forward ();
		public void fullscreen ();
		public bool fullscreen_request (bool toggle_on);
		public void key_press (GWebEngine.KeyEvent e);
		public void load (string url);
		public void reload ();
		public void take ();
		public void unfullscreen ();
		public bool can_go_back { get; set; }
		public bool can_go_forward { get; set; }
		public GWebEngine.WebSettings? settings { get; set construct; }
		public string? title { get; set; }
		public string? url { get; set; }
		public int winid { get; set construct; }
		public signal bool on_key_press (GWebEngine.KeyEvent e);
		public signal void ready ();
		public signal GWebEngine.JSResult signal_execute (string code);
		public signal bool signal_find (string text);
		public signal void signal_fullscreen ();
		public signal bool signal_fullscreen_request (bool toggle_on);
		public signal void signal_go_back ();
		public signal void signal_go_forward ();
		public signal void signal_load (string url);
		public signal void signal_reload ();
		public signal void signal_unfullscreen ();
	}
	[CCode (cheader_filename = "gwebengine.h")]
	public interface Plugin : GLib.Object {
		public abstract GWebEngine.Main activated (string? data);
		public abstract void deactivated ();
		public abstract void registered (GWebEngine.PluginLoader loader);
	}
	[CCode (cheader_filename = "gwebengine.h")]
	public errordomain PluginError {
		NOT_SUPPORTED,
		UNEXPECTED_TYPE,
		NO_REGISTRATION_FUNCTION,
		FAILED
	}
	[CCode (cheader_filename = "gwebengine.h")]
	public static GWebEngine.Main? load_plugin (string path, string? data, string[] a = new string[0] { });
}
